swagger: '2.0'
info:
  title: Ringo API
  version: "0.1"
consumes:
  - servicelication/json
produces:
  - servicelication/json
# security:
#   # enable OAuth protection for all REST endpoints
#   # (only active if the TOKENINFO_URL environment variable is set)
#   - oauth2: [uid]
paths:
  /login:
    post:
      tags: [Auth]
      operationId: ringo_auth.api.auth.login
      summary: Login
      parameters:
        - name: values
          in: body
          schema:
            $ref: '#/definitions/LoginCredentials'
      responses:
        200:
          description: JWT token.
          schema:
              type: string
        403:
          description: User not authenticated
  /clients:
    post:
      tags: [Auth]
      operationId: ringo_service.api.createx
      summary: Create a new Client
      parameters:
        - name: values
          in: body
          schema:
            $ref: '#/definitions/RegisterClient'
      responses:
        200:
          description: Client data to be used in client for authorisation.
          schema:
            $ref: '#/definitions/Client'
        403:
          description: User not authenticated
  /users:
    get:
      tags: [Users]
      operationId: ringo_service.api.search
      summary: Get all users
      parameters:
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 100
        - name: offset
          in: query
          type: integer
          minimum: 0
          default: 0
        - name: search
          in: query
          type: string
        - name: sort
          in: query
          type: string
        - name: fields
          in: query
          type: string
      responses:
        200:
          description: Return users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags: [Users]
      operationId: ringo_service.api.create
      summary: Create a user
      parameters:
        - name: values
          in: body
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: New user created
  /users/{item_id}:
    get:
      tags: [Users]
      operationId: ringo_service.api.read
      summary: Get a single user
      parameters:
        - $ref: '#/parameters/item_id'
      responses:
        200:
          description: Return user
          schema:
            $ref: '#/definitions/User'
        404:
          description: User does not exist
    put:
      tags: [Users]
      operationId: ringo_service.api.update
      summary: Update a user
      parameters:
        - $ref: '#/parameters/item_id'
        - name: values
          in: body
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User updated
    delete:
      tags: [Users]
      operationId: ringo_service.api.delete
      summary: Remove a user
      parameters:
        - $ref: '#/parameters/item_id'
      responses:
        204:
          description: User was deleted
        404:
          description: User does not exist
  /users/{item_id}/password:
    post:
      tags: [Users]
      operationId: ringo_service.api.generic
      summary: Get a single user
      parameters:
        - $ref: '#/parameters/item_id'
        - name: values
          in: body
          description: 'Password of the user'
          schema:
            type: object
            properties:
                password:
                  type: string
      responses:
        200:
          description: Return user password
          schema:
            type: object
            properties:
                password:
                  type: string
        404:
          description: User does not exist
parameters:
  item_id:
    name: item_id
    description: User's Unique identifier
    in: path
    type: integer
    required: true
definitions:
  User:
    type: object
    required:
      - id
      - name
      - password
    properties:
      id:
        type: integer
        description: No description available
        example: 123
        readOnly: false
      uuid:
        type: string
        description: No description available
        example: Yeah! I'm a string
        readOnly: false
      created:
        type: string
        description: No description available
        example: 2017-10-09T17:22:13.126970
        readOnly: false
      updated:
        type: string
        description: No description available
        example: 2017-10-09T17:22:13.127004
        readOnly: false
      name:
        type: string
        description: No description available
        example: Yeah! I'm a string
        readOnly: false
      password:
        type: string
        description: No description available
        example: Yeah! I'm a string
        readOnly: false
  Client:
    type: object
    required:
      - client_id
      - client_secret
    properties:
      client_id:
        type: string
        description: Client id
        example: KTkuiJZsvitxsJdmym7BNlBqRNuId41IIdxQ4iN6
        readOnly: true
      client_secret:
        type: string
        description: Client secret
        example: Qi44fiuyJMf5mHsO7RgoifmfhpUTecCHzUVngCrgHO2Ek2dTqJ
        readOnly: true
  RegisterClient:
    type: object
    description: Data of the new client including username and password of the user which registers the new client
    required:
      - username
      - password
      - name
      - scopes
      - redirect_uris
    properties:
      username:
        type: string
        description: Username to login
        example: User1
      password:
        type: string
        description: Password to login
        example: Password
      name:
        type: string
        description: Name/Description of the client
        example: Foo Microservice
      scopes:
        type: string
        description: Space separated list of scopes
        example: foo bar
      redirect_uris:
        type: string
        description: Space separated list of uris to complete authorisation
        example: http://localhost:8000/authorize
  LoginCredentials:
    type: object
    description: Data of the new client including username and password of the user which registers the new client
    required:
      - client_id
      - client_secret
    properties:
      client_id:
        type: string
        description: ID of the client
        example: KTkuiJZsvitxsJdmym7BNlBqRNuId41IIdxQ4iN6
      client_secret:
        type: string
        description: Secret of the client.
        example: Qi44fiuyJMf5mHsO7RgoifmfhpUTecCHzUVngCrgHO2Ek2dTqJ

securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    scopes:
      uid: Unique identifier of the user accessing the service.
